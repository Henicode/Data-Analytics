-- data cleaning project --




-- Converting the date value for the sale date --


SELECT SaleDate, CONVERT(date, SaleDate)
FROM data_clean;

UPDATE data_clean
SET SaleDate = CONVERT(date, SaleDate)

-- property address null or empty values to be assigned as owneraddress
 
 
 -- This query joins the same table together using their parcel id and is not the same in their unique id --
 -- this basically says where their parcel id colum is the same but their row is different 
 
SELECT * 
FROM data_clean a
JOIN data_clean b
 on a.ParcelID = b.ParcelID  
 AND a.[UniqueID] <> b.[UniqueID]

-- query will identify the rows where they are empty or null values where their columns are the same but have different rows ---

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.OwnerAddress, ISnull(a.PropertyAddress, B.OwnerAddress)
FROM data_clean a                                                     -- ABOVE query will identity the all the null values in the first parameter (PropertyAddress) and replace it with the second parameter (OwnerAddress)
JOIN data_clean b
 on a.ParcelID = b.ParcelID  
 AND a.[uniqueID] <> b.[uniqueID] 
 WHERE a.PropertyAddress = ''
  
             -- Below query updates all the empty values of the property address with the owneraddress 
update data_clean
set PropertyAddress = OwnerAddress
WHERE PropertyAddress = ''



   -- Breaking out Address into individual columns (address, city, state) for both the property address and owner address 
   -- for the property address, since we have replaced some of the empty values into the owner address, they will also contain the state
   
   -- using the substring function, you can extract some characters from a string. --
   -- SUBGSTRING (string, start, length).  STRING to extract from, START position, first position is 1, LENGTH number of characters to extract 
   SELECT 
   SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress ) as Address  
	SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress ) +1, LEN(PropertyAddress)) as street 
   FROM data_clean;

    -- owner address seperation --
    -- you can also use PARSNAME to seperate values, it essentially does the same thing but it extracts backwards and also looks for a . dot instead of ,commas --
    -- with PARSENAME, you can only call up to 3 values. if you call on the 4th positioned value it will output null -- 
    -- PARSENAME is alot quicker than SUBSTRING. 
    
    SELECT 
		PARSENAME (REPLACE(owneraddress, ',', '.') ,3),
		PARSENAME (REPLACE(owneraddress, ',', '.') ,2),
		PARSENAME (REPLACE(owneraddress, ',', '.') ,1)
    FROM data_clean;
    
    
    
    -- collecting all the SoldAsVacant values, and collecting the values that differe 
    
    SELECT distinct(SoldAsVacant), COUNT(SoldAsVacant)
    FROM DATA_CLEAN
    GROUP BY SoldAsVacant
    
    -- using CASE statement, you can reassign the value , in an if and else statment like
    
    SELECT SoldAsVacant
		CASE when SoldAsVacant = 'y' THEN 'Yes'
             when SoldAsVacant = 'n' THEN 'No'
             ELSE SoldAsVacant 
             END
	from data_clean
    
    
    -- removing duplicates --
    
    
