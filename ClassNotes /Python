
Sets - type of collection 
     - they are unordered 
     - do not contain duplicates 

conditions and branching 
Write an if statement to determine if an album came out before 1980 or in the years: 1991 or 1993. If the condition is true print out the year the album came out.

album = 1999
     if (album < 1980 or album == 1991 or album == 1993):
         print("Your album came out in the year:", album)
     else :
          print("None of those years")
    
A function is a reusable block of code which performs operations specified in the function. They let you break down tasks and allow you to reuse your code in different programs.

There are two types of functions :

     Pre-defined functions
     User defined functions
     
     
     
  Variables
     The input to a function is called a formal parameter.

     A variable that is declared inside a function is called a local variable. The parameter only exists within the function
          (i.e. the point where the function starts and stops).

     A variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout the program.
          We will discuss more about global variables at the end of the lab.

Exceptional handling 
     an error that occurs during the execution of code. This error causes the code to raise an exception and if not prepared to handle
     it will halt the execution of the code.

A try except will allow you to execute code that might raise an exception and in the case of any exception or a specific one we can handle or catch
     the exception and execute specific code. This will allow us to continue the execution of our program even if there is an exception.

Eg.messAround -
     # potential code before try catch
a = 6
try:
    # code to try to execute
    def multi(b):
        c = a + b
        if (c > 6):
            print("your calc is :", c)
except:
        # code to execute if there is an exception
        print("error")
    
    
multi(266)
# code that will still execute if there is an exception

-------------
eg.2

          a = 1

          try:
              b = int(input("Please enter a number to divide a"))
              a = a/b
              print("Success a=",a)
          except ZeroDivisionError:
              print("The number you provided cant divide 1 because it is 0")
          except ValueError:
              print("You did not provide a number")
          except:
              print("Something went wrong")

Method - changes or interacts with the objects

class
__init__, which is used to initialize the object
self contains all the attributes in the set.
add_radius() with the parameter r, the method adds the value of r to the attribute radius
To access the radius we use the syntax self.radius
dir command gets a list of an object's methods 

     class Circle(object):

         # Constructor
         def __init__(self, radius=3, color='blue'):
             self.radius = radius
             self.color = color 

         # Method
         def add_radius(self, r):
             self.radius = self.radius + r
             return(self.radius)

          ----------
          class Rectangle(object):
    
              # Constructor
              def __init__(self, width=2, height=3, color='r'):
                  self.height = height 
                  self.width = width
                  self.color = color

              # Method
              def drawRectangle(self):
                  plt.gca().add_patch(plt.Rectangle((0, 0), self.width, self.height ,fc=self.color))
                  plt.axis('scaled')
                  plt.show()
                  
               #ACCESS THE GRAPH 
        SkinnyBlueRectangle.drawRectangle()


Open function provides a File object that contains the methods and attributes you need in order to read, save, and manipulate the file
          **r**: Read mode for reading files
          **w**: Write mode for writing files
          
     # Read the Example1.txt
          example1 = "Example1.txt"
          file1 = open(example1, "r")
          
     # Print the path of file
          file1.name

     # Print the mode of file, either 'r' or 'w'
          file1.mode
          
     # Print the file with '\n' as a new line
          print(FileContent)

     # Type of file content
          type(FileContent)

     # Close file after finish
          file1.close()

With statement is better practice, it automatically closes the file even if the code encounters an exception.
     The code will run everything in the indent block then close the file object.

     # Open file using with
          with open(example1, "r") as file1:
             FileContent = file1.read()
             print(FileContent)

      # Read first four characters
          with open(example1, "r") as file1:
              print(file1.read(4))


     # Iterate through the lines
          with open(example1,"r") as file1:
                  i = 0;
                  for line in file1:
                      print("Iteration", str(i), ": ", line)
                      i = i + 1
                      
     # Read all lines and save as a list
          with open(example1, "r") as file1:
              FileasList = file1.readlines()

---------
We can open a file object using the method write() to save the text file to a list.
To write to a file, the mode argument must be set to w

          # Write line to file
               exmp2 = 'Example2.txt'
               with open(exmp2, 'w') as writefile:
                   writefile.write("This is line A")
                   
          # Write lines to file
               with open(exmp2, 'w') as writefile:
                   writefile.write("This is line A\n")
                   writefile.write("This is line B\n")

          # Write the strings in the list to text file
               Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]
               with open('Example2.txt', 'w') as writefile:
                   for line in Lines:
                       print(line)
                       writefile.write(line)
                       
          # Verify if writing to file is successfully executed
               with open('Example2.txt', 'r') as testwritefile:
                   print(testwritefile.read())

          # Write a new line to text file
               with open('Example2.txt', 'a') as testwritefile:
                   testwritefile.write("This is line C\n")
                   testwritefile.write("This is line D\n")
                   testwritefile.write("This is line E\n")

          # Verify if the new line is in the text file
               with open('Example2.txt', 'r') as testwritefile:
                   print(testwritefile.read())

r+ : Reading and writing. Cannot truncate the file.
w+ : Writing and reading. Truncates the file.
a+ : Appending and Reading. Creates a new file, if none exists.





























