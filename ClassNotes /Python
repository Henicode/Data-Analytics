
Sets - type of collection 
     - they are unordered 
     - do not contain duplicates 

conditions and branching 
Write an if statement to determine if an album came out before 1980 or in the years: 1991 or 1993. If the condition is true print out the year the album came out.

album = 1999
     if (album < 1980 or album == 1991 or album == 1993):
         print("Your album came out in the year:", album)
     else :
          print("None of those years")
    
A function is a reusable block of code which performs operations specified in the function. They let you break down tasks and allow you to reuse your code in different programs.

There are two types of functions :

     Pre-defined functions
     User defined functions
     
     
     
  Variables
     The input to a function is called a formal parameter.

     A variable that is declared inside a function is called a local variable. The parameter only exists within the function
          (i.e. the point where the function starts and stops).

     A variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout the program.
          We will discuss more about global variables at the end of the lab.

Exceptional handling 
     an error that occurs during the execution of code. This error causes the code to raise an exception and if not prepared to handle
     it will halt the execution of the code.

A try except will allow you to execute code that might raise an exception and in the case of any exception or a specific one we can handle or catch
     the exception and execute specific code. This will allow us to continue the execution of our program even if there is an exception.

Eg.messAround -
     # potential code before try catch
a = 6
try:
    # code to try to execute
    def multi(b):
        c = a + b
        if (c > 6):
            print("your calc is :", c)
except:
        # code to execute if there is an exception
        print("error")
    
    
multi(266)
# code that will still execute if there is an exception

-------------
eg.2

          a = 1

          try:
              b = int(input("Please enter a number to divide a"))
              a = a/b
              print("Success a=",a)
          except ZeroDivisionError:
              print("The number you provided cant divide 1 because it is 0")
          except ValueError:
              print("You did not provide a number")
          except:
              print("Something went wrong")

Method - changes or interacts with the objects

class
__init__, which is used to initialize the object
self contains all the attributes in the set.
add_radius() with the parameter r, the method adds the value of r to the attribute radius
To access the radius we use the syntax self.radius

     class Circle(object):

         # Constructor
         def __init__(self, radius=3, color='blue'):
             self.radius = radius
             self.color = color 

         # Method
         def add_radius(self, r):
             self.radius = self.radius + r
             return(self.radius)













