
Sets - type of collection 
     - they are unordered 
     - do not contain duplicates 

conditions and branching 
Write an if statement to determine if an album came out before 1980 or in the years: 1991 or 1993. If the condition is true print out the year the album came out.

album = 1999
     if (album < 1980 or album == 1991 or album == 1993):
         print("Your album came out in the year:", album)
     else :
          print("None of those years")
    
A function is a reusable block of code which performs operations specified in the function. They let you break down tasks and allow you to reuse your code in different programs.

There are two types of functions :

     Pre-defined functions
     User defined functions
     
     
     
  Variables
     The input to a function is called a formal parameter.

     A variable that is declared inside a function is called a local variable. The parameter only exists within the function
          (i.e. the point where the function starts and stops).

     A variable that is declared outside a function definition is a global variable, and its value is accessible and modifiable throughout the program.
          We will discuss more about global variables at the end of the lab.

Exceptional handling 
     an error that occurs during the execution of code. This error causes the code to raise an exception and if not prepared to handle
     it will halt the execution of the code.

A try except will allow you to execute code that might raise an exception and in the case of any exception or a specific one we can handle or catch
     the exception and execute specific code. This will allow us to continue the execution of our program even if there is an exception.

Eg.messAround -
     # potential code before try catch
a = 6
try:
    # code to try to execute
    def multi(b):
        c = a + b
        if (c > 6):
            print("your calc is :", c)
except:
        # code to execute if there is an exception
        print("error")
    
    
multi(266)
# code that will still execute if there is an exception

-------------
eg.2

          a = 1

          try:
              b = int(input("Please enter a number to divide a"))
              a = a/b
              print("Success a=",a)
          except ZeroDivisionError:
              print("The number you provided cant divide 1 because it is 0")
          except ValueError:
              print("You did not provide a number")
          except:
              print("Something went wrong")

Method - changes or interacts with the objects

class
__init__, which is used to initialize the object
self contains all the attributes in the set.
add_radius() with the parameter r, the method adds the value of r to the attribute radius
To access the radius we use the syntax self.radius
dir command gets a list of an object's methods 

     class Circle(object):

         # Constructor
         def __init__(self, radius=3, color='blue'):
             self.radius = radius
             self.color = color 

         # Method
         def add_radius(self, r):
             self.radius = self.radius + r
             return(self.radius)

          ----------
          class Rectangle(object):
    
              # Constructor
              def __init__(self, width=2, height=3, color='r'):
                  self.height = height 
                  self.width = width
                  self.color = color

              # Method
              def drawRectangle(self):
                  plt.gca().add_patch(plt.Rectangle((0, 0), self.width, self.height ,fc=self.color))
                  plt.axis('scaled')
                  plt.show()
                  
               #ACCESS THE GRAPH 
        SkinnyBlueRectangle.drawRectangle()


Open function provides a File object that contains the methods and attributes you need in order to read, save, and manipulate the file
          **r**: Read mode for reading files
          **w**: Write mode for writing files
          
     # Read the Example1.txt
          example1 = "Example1.txt"
          file1 = open(example1, "r")
          
     # Print the path of file
          file1.name

     # Print the mode of file, either 'r' or 'w'
          file1.mode
          
     # Print the file with '\n' as a new line
          print(FileContent)

     # Type of file content
          type(FileContent)

     # Close file after finish
          file1.close()

With statement is better practice, it automatically closes the file even if the code encounters an exception.
     The code will run everything in the indent block then close the file object.

     # Open file using with
          with open(example1, "r") as file1:
             FileContent = file1.read()
             print(FileContent)

      # Read first four characters
          with open(example1, "r") as file1:
              print(file1.read(4))


     # Iterate through the lines
          with open(example1,"r") as file1:
                  i = 0;
                  for line in file1:
                      print("Iteration", str(i), ": ", line)
                      i = i + 1
                      
     # Read all lines and save as a list
          with open(example1, "r") as file1:
              FileasList = file1.readlines()

---------
We can open a file object using the method write() to save the text file to a list.
To write to a file, the mode argument must be set to w

          # Write line to file
               exmp2 = 'Example2.txt'
               with open(exmp2, 'w') as writefile:
                   writefile.write("This is line A")
                   
          # Write lines to file
               with open(exmp2, 'w') as writefile:
                   writefile.write("This is line A\n")
                   writefile.write("This is line B\n")

          # Write the strings in the list to text file
               Lines = ["This is line A\n", "This is line B\n", "This is line C\n"]
               with open('Example2.txt', 'w') as writefile:
                   for line in Lines:
                       print(line)
                       writefile.write(line)
                       
          # Verify if writing to file is successfully executed
               with open('Example2.txt', 'r') as testwritefile:
                   print(testwritefile.read())

          # Write a new line to text file
               with open('Example2.txt', 'a') as testwritefile:
                   testwritefile.write("This is line C\n")
                   testwritefile.write("This is line D\n")
                   testwritefile.write("This is line E\n")

          # Verify if the new line is in the text file
               with open('Example2.txt', 'r') as testwritefile:
                   print(testwritefile.read())

r+ : Reading and writing. Cannot truncate the file.
w+ : Writing and reading. Truncates the file.
a+ : Appending and Reading. Creates a new file, if none exists.


---------------------
PANDAS 

 Pandas generally provide two data structures for manipulating data, They are:
          DataFrame - a two-dimensional data structure
          Series - a one-dimensional array of indexed data
          
          
          
 Importing pandas 
 
 import pandas 
 csv_path = 'file1.csv'
 df = pandas.read_csv(csv_path).   #df datadrame
 

     #Define a dictionary 'x'

     x = {'Name': ['Rose','John', 'Jane', 'Mary'], 'ID': [1, 2, 3, 4], 'Department': ['Architect Group', 'Software Group',
                    'Design Team', 'Infrastructure'], 
                     'Salary':[100000, 80000, 50000, 60000]}

     #casting the dictionary to a DataFrame
     df = pd.DataFrame(x)

     #display the result df
     df

     #Retrieving the "ID" column and assigning it to a variable x
     x = df[['ID']]
     x
     
     #check the type of x
     type(x)


loc() is a label-based data selecting method which means that we have to pass the name of the row or column that we want to select.
This method includes the last element of the range passed in it.

          loc[row_label, column_label]
iloc() is an indexed-based selecting method which means that we have to pass integer index in the method to select a specific row/column.
This method does not include the last element of the range passed in it.

          iloc[row_index, column_index]

EG 
 
 # Access the value on the first row and the first column
          df.iloc[0, 0]  

 # Access the column using the name
          df.loc[0, 'Salary']
 #To display the first 5 rows of new dataframe
          df.head()

SLICING

Slicing uses the [] operator to select a set of rows and/or columns from a DataFrame.
To slice out a set of rows, you use this syntax: data[start:stop]

 # let us do the slicing using old dataframe df
                 df.iloc[0:2, 0:3]

          #let us do the slicing using loc() function on old dataframe df where index column is having labels as 0,1,2
                 df.loc[0:2,'ID':'Department']


--------------------------------------------
ARRAY

     # Create numpy array
          c = np.array([20, 1, 2, 3, 4])
          c
          
     # Assign the first element to 100
          c[0] = 100
          c

     # Slicing the numpy array
          d = c[1:4]
          d
          
     # Set the fourth element and fifth element to 300 and 400
          c[3:5] = 300, 400
          c
     # Print everything before assined position - 1,2,3,4
          print(arr[:4])
          
     # Print everything after assigned position - 5,6,7
          print(arr[4:])

The dot product of the two numpy arrays u and v is given by:

X = np.array([1, 2])
Y = np.array([3, 2])

# Calculate the dot product

np.dot(X, Y)
= 7.      x = 1*3 +  y = 2*2



-----------------
 2D Numpy Array
 
 eg\\
 
 
           # Convert list to Numpy Array
           # Every element is the same type

                    A = np.array(a)
                    A
          # Show the numpy array dimensions
                    A.ndim
          # Show the numpy array shape
                    A.shape
          # Show the numpy array size
                    A.size
          # Access the element on the second row and third column
                    A[1, 2]
          # Access the element on the second row and third column
                    A[1][2]
          # Access the element on the first row and first and second columns
                    A[0][0:2]
          # Access the element on the first and second rows and third column
                    A[0:2, 2]

-------------------------------

API - returns a response, via an HTTP message, this response is usually contained within a JSON.
Rest API’s function by sending a request, the request is communicated via HTTP message.
     The HTTP message usually contains a JSON file.
     This contains instructions for what operation we would like the service or resource to perform
HTTP(Hypertext Transfer Protocol) - application-layer protocol for transmitting hypermedia documents, such as HTML
URL(Uniform resource locator) - reference to a web resource that specifies its location on a computer network
                                and a mechanism for retrieving it
          We can break the URL into three parts.
               - scheme this is this protocol, for this lab it will always be http://
               - Internet address or Base URL this will be used to find the location here are some examples: www.ibm.com  
               - route location on the web server for example: /images/IDSNlogo.png
Status Code Responses - 1XX -Informational 
                        100 - Everything so far is OK
                        2XX - Success
                        200 - OK
                        3XX - Redirection 
                        300 - Multiple Choices 
                        4XX - Client Error 
                        401 - Unauthorized 
                        403 - Forbidden 
                        404 - Not Found 
                        500 - Server Error 
                        501 - No Implemented 
 ------------------------------------------
 
 Generating using API Get methods 
                                   get_cell()
                                   get_city()
                                   get_dob()
                                   get_email()
                                   get_first_name()
                                   get_full_name()
                                   get_gender()
                                   get_id()
                                   get_id_number()
                                   get_id_type()
                                   get_info()
                                   get_last_name()
                                   get_login_md5()
                                   get_login_salt()
                                   get_login_sha1()
                                   get_login_sha256()
                                   get_nat()
                                   get_password()
                                   get_phone()
                                   get_picture()
                                   get_postcode()
                                   get_registered()
                                   get_state()
                                   get_street()
                                   get_username()
                                   get_zipcode()
 
 Q -  generate photos of the random 5 users.
               for user1 in some_list:
                     print(user.get_picture())
 Q - generate a table with information about the 10 users, we can write a function containing all desirable parameters.
     For example, name, gender, city
               def get_users():
                   users =[] 
                   for user in RandomUser.generate_users(10):
                       users.append({"Name":user.get_full_name(),
                                     "Gender":user.get_gender(),
                                     "City":user.get_city(),
                                     "State":user.get_state(),
                                     "Email":user.get_email(), 
                                     "DOB":user.get_dob(),
                                     "Picture":user.get_picture()})   
                   return pd.DataFrame(users)    
-------------------------------------------
WEBSCRAPPING 
import beautiful soup for web scrapping 

          from bs4 import BeautifulSoup 
          import requests 

# pass the website restored into beatiful soup for scrapping 
          soup = BeautifulSoup(html, "html.parser")
# use the prettify method to display the HTML in the nested structure 
          print(soup.prettify())
# lets say we want to extract the tag of the page. 
          tag_object=soup.title
          print("tag object:",tag_object)
# you can access the parents with the parents of html structure 
          parent_tag=tag_child.parent
          parent_tag
# the find_all() method looks through a tag's descendants and retrives all descendants that match your filters 
#   the method signature for find_all(name, attrs, recursive, string, limit, **kwargs)

# set the name parameteter to a tag name, method will extract all the tags with name and its children 
          table_rows=table_bs.find_all('tr')
          table_rows

--------------------------------------------
installing
                              #!pip install pandas==1.3.3
                              #!pip install requests==2.26.0
                              !mamba install bs4==4.10.0 -y
                              !mamba install html5lib==1.1 -y
                              !pip install lxml==4.6.4
                              #!pip install plotly==5.3.1
                              import pandas as pd
                              import requests
                              from bs4 import BeautifulSoup

Extracting Stock Data using yfinance 
import yfinance as yf 
import pandas as pd 


-----------------------------------------------

Identify the database connection credentials
Connecting to dashDB or DB2 database requires the following information:
                    Driver Name
                    Database name
                    Host DNS name or IP address
                    Host port
                    Connection protocol
                    User ID (or username)
                    User Password
EX. 
               #Replace the placeholder values with your actual Db2 hostname, username, and password:
               dsn_hostname = "YourDb2Hostname" # e.g.: "54a2f15b-5c0f-46df-8954-7e38e612c2bd.c1ogj3sd0tgtu0lqde00.databases.appdomain.cloud"
               dsn_uid = "YourDb2Username"        # e.g. "abc12345"
               dsn_pwd = "YoueDb2Password"      # e.g. "7dBZ3wWt9XN6$o0J"

               dsn_driver = "{IBM DB2 ODBC DRIVER}"
               dsn_database = "BLUDB"            # e.g. "BLUDB"
               dsn_port = "YourPort"                # e.g. "32733" 
               dsn_protocol = "TCPIP"            # i.e. "TCPIP"
               dsn_security = "SSL"              #i.e. "SSL"
               
#Create database connection
               try:
                   conn = ibm_db.connect(dsn, "", "")
                   print ("Connected to database: ", dsn_database, "as user: ", dsn_uid, "on host: ", dsn_hostname)

               except:
                   print ("Unable to connect: ", ibm_db.conn_errormsg() )







         




















