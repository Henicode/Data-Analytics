
# import pandas library
      import pandas as pd
      import numpy as np
      
The describe function automatically computes basic statistics for all continuous variables. Any NaN values are automatically skipped in these statistics.
This will show:
                  the count of that variable
                  the mean
                  the standard deviation (std)
                  the minimum value
                  the IQR (Interquartile Range: 25%, 50% and 75%)
                  the maximum value    
      
      
#This function will download the dataset into your browser 

      from pyodide.http import pyfetch

      async def download(url, filename):
          response = await pyfetch(url)
          if response.status == 200:
              with open(filename, "wb") as f:
                  f.write(await response.bytes())
#you will need to download the dataset; if you are running locally, please comment out the following 
          await download(path, "auto.csv")
          path="auto.csv"                  
                  
# Import pandas library
          import pandas as pd

# Read the online file by the URL provides above, and assign it to variable "df"
          df = pd.read_csv(path, header=None)                  
                  
# show the first 5 rows using dataframe.head() method
        print("The first 5 rows of the dataframe") 
        df.head(5)   // df.tail(5) # bottom 5               

# replace "?" to NaN
            df.replace("?", np.nan, inplace = True)
            df.head(5)
            
# Calculate the mean value for the "horsepower" column
            avg_horsepower = df['horsepower'].astype('float').mean(axis=0)
            print("Average horsepower:", avg_horsepower)            
            
# Calculate the mean value for "peak-rpm" column
            avg_peakrpm=df['peak-rpm'].astype('float').mean(axis=0)
            print("Average peak rpm:", avg_peakrpm)            
            
# Convert mpg to L/100km by mathematical operation (235 divided by mpg)
            df['city-L/100km'] = 235/df["city-mpg"]

# check your transformed data 
            df.head()            
            
# replace (original value) by (original value)/(maximum value)
            df['length'] = df['length']/df['length'].max()
            df['width'] = df['width']/df['width'].max()            
            
#Let's find the scatterplot of "engine-size" and "price".
# Engine size as potential predictor variable of price
            sns.regplot(x="engine-size", y="price", data=df)
            plt.ylim(0,)

# What is the data type of the column "peak-rpm"?
# Write your code below and press Shift+Enter to execute 
            print(df["peak-rpm"].dtypes)
            
# Find the correlation between the following columns: bore, stroke, compression-ratio, and horsepower.
# Write your code below and press Shift+Enter to execute 
            print(df[['bore','stroke','compression-ratio','horsepower']].corr)
          
# Find the correlation between x="stroke" and y="price".            
             df[["stroke","price"]].corr()       
            
# Given the correlation results between "price" and "stroke", do you expect a linear relationship?
# Verify your results using the function "regplot()".            
            sns.regplot(x="stroke", y="price", data=df)
            
# Use the "groupby" function to find the average "price" of each car based on "body-style".            
            first = df[["body-style", "price"]]
            grouping = first.groupby(["body-style"], as_index=False).mean()
            grouping
# Create and train a Multiple Linear Regression model "lm2" where the response variable is "price",
# and the predictor variable is "normalized-losses" and "highway-mpg".
            lm2 = LinearRegression()
            lm2.fit(df[['normalized-losses' , 'highway-mpg']],df['price'])

more
more





































