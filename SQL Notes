Structured Query Language is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS).

SQL Keywords are not case sensetive. 

Some SQL important commands are : 
                                    SELECT - extracts data from a database
                                    SELECT TOP,LIMIT, FETCH - Ex. SELECT TOP 50 PERCENT * FROM Customers;  | 
                                    UPDATE - updates data in a database
                                    DELETE - deletes data from a database. Ex - DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';
                                    INSERT INTO - inserts new data into a database
                                    CREATE DATABASE - creates a new database
                                    ALTER DATABASE - modifies a database
                                    JOIN clause - is used used to combine rows from two or more tables, based on a related column between them.
                                                -(INNER) JOIN: Returns records that have matching values in both tables
                                                -LEFT (OUTER) JOIN: Returns all records from the left table, and the matched records from the right table
                                                -RIGHT (OUTER) JOIN: Returns all records from the right table, and the matched records from the left table
                                                -FULL (OUTER) JOIN: Returns all records when there is a match in either left or right table
                                    UNION operator - used to combine the result set of two or more of SELECT statements. 
                                    CREATE TABLE - creates a new table
                                    ALTER TABLE - modifies a table
                                    DROP TABLE - deletes a table
                                    CREATE INDEX - creates an index (search key)
                                    DROP INDEX - deletes an index
                                    DISTINCT - used to return only distinct (different) values.
                                    WHERE - used to filter records. you can use WHERE clause for comparison (+,-,/,*,<,>,exc) and also use
                                            BETWEEN (Between a certain range), LIKE (Search for a pattern), IN (To specify multiple possible values for a column).
                                          - WHERE clause can be combined with AND operator (displays a record if all the conditions separated by AND are TRUE.),
                                                  OR operator (displays a record if any of the conditions separated by OR is TRUE) , and
                                                  NOT operator (displays a record if the condition(s) is NOT TRUE).
                                    ORDER BY - used to sort the result-set in ascending or descending order. it sort the result ascending by default or (ORDER BY Country ASC),
                                              To sort the records in descending order, use the DESC keyword (ORDER BY Country DESC;).
                                   INSERT INTO - used to insert new records in a table. Ex. INSERT INTO Customers (CustomerName, City, Country)
                                                                                            VALUES ('Cardinal', 'Stavanger', 'Norway');
                                   NULL value - field with no value or empty. You can test test the value by calling IS NULL or IS NOT NULL to determine if value is stored.
                                   UPDATE - used to modify the existing records in a table. WHERE clause specifies which record(s) that should be updated.
                                          - If you omit the WHERE clause, all records in the table will be updated!
                                          - EX - UPDATE Customers
                                                 SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
                                                 WHERE CustomerID = 1;
                                 MIN() function returns the smallest value of the selected column. (Ex. SELECT MIN(PRICE) AS low_price)
                                 MAX() function returns the largest value of the selected column.  (Ex. SELECT MAX(PRICE) FROM customers)
                                 COUNT() function returns the number of rows that matches a specified criterion. 
                                 AVG() function returns the average value of a numeric column. SELECT AVG(column_name) 
                                 SUM() function returns the total sum of a numeric column. SELECT SUM(column_name)
                                 LIKE() operator used in a WHERE caluse to search for a specified pattern in a column.  WHERE last_name LIKE 'a%' OR 'a___' . %a - mean name start with a
                                      -- Wildcard characters - used in the LIKE operatror. using the symbols to specify the operation you want to execute. ex. WHERE first_name LIKE '[f-a]'  (https://www.w3schools.com/sql/sql_wildcards.asp) for more wildcard symbols 
                                 IN operator allows to specity multiple values in a WHERE caluse. is also a shorthand for multiple OR conditions. 
                                 BETWEEN operator selects valkues within a gven range. Value can be numbers, text, or dates. BETWEEN value1 AND value2. can also use the NOT operation to exclude certain data
                                 AS or Aliases are used to give a table or column in a table a temporary name. it will only last a duration of that query. 
                                 GROUP BY - statement groups rows that have the same values into summary rows. often used with aggregate functions such as (COUNT(), MAX(), MIN(), SUM(), AVG()) to group the result-set by one or more columns.
                                     GROUP BY syntax - SELECT column_name(s)
                                                       FROM table_name
                                                       WHERE condition
                                                       GROUP BY column_name(s)
                                                       ORDER BY column_name(s);
                                 REGEXP - regular expressions allow us to search for more complex patterns. instead of using % to describe specified string, you can use REGEXP 'alex' to query.
                                        - ^ can also use the carrot sign to represent the begining of a string. AND $ to represent the end of a string. ^ can be placed front of string, $ placed at the end of string 
                                        - | can use pipe/vertical bar to search for multiple words, a logical OR. WHERE last_name REGEXP 'brook | james' 
                                 




Data stucture is a collection of data stored in format that can easily be accessed .
to manage our data, we use to DBMS (database management system). two types of datbase management. 1. relational 2. non relational(nonsql).

*We have to follow the order of clause. we cannot change it. so they go as:
SELECT 
FROM
WHERE 
ORDER 

SELECT statment- used to select data from a database. you can specify where you want to select by (SELECT customers) or you can select all by using (SELECT *)
FROM - used to specif which table to select or delete data form.  (FROM customers)
WHERE clause- to filter data . (ex- WHERE points > 200)
ORDER BY - used to sort the result-set in ascending or descending order. (ex. ORDER BY first_name)















 ----------------------------------------------------------------EXC-----------------------------------------------------------------------------------
return products with quantity in stock euqal to 49, 78, 32 ??
SELECT *
FROM products 
WHERE quantity_in_stock in ('49','78','32')

return customers born between 1/1/1990 - 1/1/2000 ???

SELECT * 
FROM, customers
WHERE date_of_birth between '1990/01/01' and '2000/01/01'

get customers whos address contain avenue or trail, and phone number end with 9

SELECT *
FROM customers 
Where address like '%avenue%' or
      address like '%trail%' and 
      phone_number like '%9'
      
      
  get the customers whos.  first names are ELKA or AMBUR
  last names end with EY or ON 
  last names start with MY or contains SE 
  last names contain B followed by R or U
  
  SELECT * 
  FROM customers 
  WHERE first_name REGEXP 'elka | ambur'
  WHERE last_name REGEXP 'ey$ | on$;
  WHERE last_name REGEXP '^my|se'
  WHERE last-name REGEXP 'b[ri]'
  
  
  
